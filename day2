Problem: 
Given two singly linked lists, return the point where two linked lists intersect.

Note: If the linked lists do not merge at any point, return -1.

Examples:

Input: Linked list 1: 4->4->4->4->4, Linked list 2: 4->4->4
 
Output: 4
Explanation: From the above image, it is clearly seen that the common part is 4->4 whose starting point is 4.

Input: Linked list 1: 4->1->8->4->5, Linked List 2: 5->6->1->8->4->5
 
Output: 8
Explanation: From the above image, it is clearly seen that the common part is 8->4->5 whose starting point is 8.
Input: Linked list 1: 1->2->3, Linked list 2: 4->5->6
Output: -1
Explanation: There is no common part, so there is no interaction point.
Try to solve the problem without using any extra space.

Constraints:
2 â‰¤ size of first linkedist + size of second linkedlist â‰¤ 2*105
-10000 â‰¤ data of nodes â‰¤ 10000

Solution:
int intersectPoint(Node* head1, Node* head2) {
        // Your Code Here
        //if we could traverse from back, then its easy
        //we could store the nodes of both linkedlist in a stack and remove the similar elements
        //but we have to use no extra space
        
        //observing from examples the second linkedlist cannot start from intersecting node
        if(head1==nullptr || head2==nullptr) return -1;
        Node *temp1=head1;
        Node *temp2=head2;
        while(temp1!=temp2){
            if(temp1==nullptr)  temp1=head2;
            else temp1=temp1->next;
            if(temp2==nullptr)  temp2=head1;
            else temp2=temp2->next;
        }
        return temp1->data;
}
